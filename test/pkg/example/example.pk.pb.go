// Code generated by protoc-gen-prokaf. NO NOT EDIT.
// versions:
//  protoc-gen-prokaf: 0.1.0
//  protoc: 3.20.1
// source: github.com/bilbercode/protoc-gen-prokaf/test/proto/example.proto

package example

import (
	context "context"
	prokaf "github.com/bilbercode/protoc-gen-prokaf/prokaf"
)

type ProKafExampleConsumerService interface {
	ConsumeTestOne(ctx prokaf.Context, in *TestOne, ack func(err error)) error
	ConsumeTestTwo(ctx prokaf.Context, in *TestTwo, ack func(err error)) error
	mustImplementUnimplementedConsumer()
}

type ProKafExampleProducerService interface {
	ProduceTestOne(context context.Context, out *TestOne, topic string, ack func(err error), options ...prokaf.MessageOption) error
	ProduceTestTwo(context context.Context, out *TestTwo, topic string, ack func(err error), options ...prokaf.MessageOption) error
}

type UnimplementedConsumer struct{}

func (*UnimplementedConsumer) ConsumeTestOne(_ prokaf.Context, _ *TestOne, ack func(err error)) error {
	ack(nil)
	return nil
}

func (*UnimplementedConsumer) ConsumeTestTwo(_ prokaf.Context, _ *TestTwo, ack func(err error)) error {
	ack(nil)
	return nil
}

func (*UnimplementedConsumer) mustImplementUnimplementedConsumer() {}

func RegisterProKafConsumerHandlersFromService(svc ProKafExampleConsumerService, pk prokaf.Client) {
	pk.AddRegistryEntry("example.TestOne", func(ctx prokaf.Context, dec prokaf.MessageDecoder, ack func(err error)) error {
		in := new(TestOne)
		err := dec(in)
		if err != nil {
			return err
		}
		return svc.ConsumeTestOne(ctx, in, ack)
	})
	pk.AddRegistryEntry("example.TestTwo", func(ctx prokaf.Context, dec prokaf.MessageDecoder, ack func(err error)) error {
		in := new(TestTwo)
		err := dec(in)
		if err != nil {
			return err
		}
		return svc.ConsumeTestTwo(ctx, in, ack)
	})
}

func NewProKafProducer(c prokaf.Client) ProKafExampleProducerService {
	return &proKafExampleProducerService{client: c}
}

type proKafExampleProducerService struct {
	client prokaf.Client
}

func (x *proKafExampleProducerService) ProduceTestOne(ctx context.Context, out *TestOne, topic string, ack func(err error), options ...prokaf.MessageOption) error {
	return x.client.ConsumeMessageProduce(ctx, out, topic, ack, options...)
}
func (x *proKafExampleProducerService) ProduceTestTwo(ctx context.Context, out *TestTwo, topic string, ack func(err error), options ...prokaf.MessageOption) error {
	return x.client.ConsumeMessageProduce(ctx, out, topic, ack, options...)
}
